// Copyright (c) 2019-2020, NVIDIA CORPORATION. All rights reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//    http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var nvidia=nvidia||{};nvidia.ThreeJsRenderer=function(e,t){this.meshes=[];this.container=document.getElementById(e);this.target=new THREE.Vector3(.5,.5,.5);this.xzAngle=0;this.radius=5;this.camera=null;this.scene=null;this.renderer=null;this.mesh=null;this.fragment_shaders={};this.defaultMaterial=new THREE.ShaderMaterial({vertexShader:$("#shader-vs").text(),fragmentShader:$("#shader-fs").text()});$.get("static/green_plastic.frag",function(t){return function(e){t.fragment_shaders["green_plastic"]=e;t.defaultMaterial=new THREE.ShaderMaterial({vertexShader:$("#shader-vs").text(),fragmentShader:t.fragment_shaders["green_plastic"]});console.log("Initialized green plastic shader")}}(this));this.init(t)};nvidia.ThreeJsRenderer.prototype.init=function(e){var t=1;if(e){this.camera=e}else{this.camera=new THREE.PerspectiveCamera(20,1,.1,1e4);this.camera.position.y=.5}this.scene=new THREE.Scene;this.scene.background=new THREE.Color(16777215);var i=new THREE.DirectionalLight(16777215);i.position.set(.1,3,.1);this.scene.add(i);i.castShadow=true;var n=new THREE.AmbientLight(16777215,.8);this.scene.add(n);var r=new THREE.MeshPhongMaterial({color:16448250,side:THREE.DoubleSide});var o=new THREE.PlaneBufferGeometry(100,100,1,1);var a=new THREE.Mesh(o,r);a.position.x=-1;a.position.y=0;a.position.z=-1;a.rotation.x=-.5*Math.PI;a.receiveShadow=true;var s=new THREE.AxesHelper(20);this.scene.add(s);this.renderer=new THREE.WebGLRenderer({antialias:true,preserveDrawingBuffer:true});this.scene.background=new THREE.Color("rgb(250, 250, 250)");this.renderer.setPixelRatio(window.devicePixelRatio);this.renderer.setSize($(this.container).width(),$(this.container).width());this.renderer.shadowMap.enabled=true;this.renderer.shadowMap.type=THREE.PCFSoftShadowMap;this.container.appendChild(this.renderer.domElement);var d=this;$(document).keyup(function(e){console.log("Key up "+e.which);if(e.which===85){d.target.y+=.2}else if(e.which===68){d.target.y-=.2}else if(e.which===82){d.xzAngle+=Math.PI*.1}else if(e.which===76){d.xzAngle-=Math.PI*.1}else{return}e.preventDefault();d.setManualCamera();d.render()});if(!e){this.setManualCamera()}this.controls=new THREE.OrbitControls(this.camera,this.renderer.domElement);this.controls.update();var l=this;var u=function(){requestAnimationFrame(u);l.controls.update();l.render()};u()};nvidia.ThreeJsRenderer.prototype.setMeshes=function(e,t){for(var i=0;i<this.meshes.length;++i){this.scene.remove(this.meshes[i])}this.meshes=[];if(!t){t=this.defaultMaterial}for(var n=0;n<e.length;++n){var r=e[n];var o=new THREE.Mesh(r,t);this.meshes.push(o);this.scene.add(o)}this.render();console.log("Rendered")};nvidia.ThreeJsRenderer.prototype.setManualCamera=function(){this.camera.position.z=.5+this.radius*Math.cos(this.xzAngle);this.camera.position.x=.5+this.radius*Math.sin(this.xzAngle);this.camera.lookAt(this.target)};nvidia.ThreeJsRenderer.prototype.render=function(){this.renderer.render(this.scene,this.camera)};if(typeof module!=="undefined"){module.exports=nvidia.ThreeJsRenderer}var nvidia=nvidia||{};nvidia.geometry=nvidia.geometry||{};if(typeof require!=="undefined"){var THREE=require("three");nvidia.util=require("./util.js")}nvidia.geometry.GetBoundingBox=function(t){let i=new THREE.Box3;i.min.set(0,0,0);i.max.set(0,0,0);for(var n=0;n<t.length;++n){let e=null;if(t[n].hasOwnProperty("positionBoundingBox")){e=t[n]["positionBoundingBox"]}else{t[n].computeBoundingBox();e=t[n].boundingBox}if(n===0){i.min.set(e.min.x,e.min.y,e.min.z);i.max.set(e.max.x,e.max.y,e.max.z)}else{i.min.x=Math.min(i.min.x,e.min.x);i.min.y=Math.min(i.min.y,e.min.y);i.min.z=Math.min(i.min.z,e.min.z);i.max.x=Math.max(i.max.x,e.max.x);i.max.y=Math.max(i.max.y,e.max.y);i.max.z=Math.max(i.max.z,e.max.z)}}return i};nvidia.geometry.PtCloudsFromBinary=function(s,e,d){let t=new Int32Array(s,e,4);const i=t[0];const n=t[1];nvidia.util.timed_log("Decoding "+i+" point clouds");if(n!==0){console.error("Texture mode "+n+" not supported. "+"Version mismatch between python and JS code.")}let l=[];let u=e+4*4;for(let e=0;e<i;++e){let e=new Int32Array(s,u,2);u+=2*4;let t=e[0];let i=e[1];nvidia.util.timed_log(t+" points in pointcloud");let n=new Float32Array(s,u,6);u+=6*4;let r=new THREE.Box3;r.min.set(n[0],n[1],n[2]);r.max.set(n[3],n[4],n[5]);let o=new Float32Array(s,u,t*3);u+=t*3*4;const h=new THREE.SphereBufferGeometry(d,10,10);let a=new THREE.InstancedBufferGeometry;a.index=h.index;a.attributes=h.attributes;a.instanceCount=t;a.setAttribute("instanceTranslation",new THREE.InstancedBufferAttribute(o,3));a["instanceRadius"]=d;a["positionBoundingBox"]=r;l.push(a)}return l};nvidia.geometry.BufferedGeometriesFromBinary=function(e,t){nvidia.util.timed_log("Parsing binary data");var i=new Int32Array(e,t,4);var n=i[0];var r=i[1];nvidia.util.timed_log("Decoding "+n+" meshes");if(r!==0){console.error("Texture mode "+r+" not supported. "+"Version mismatch between python and JS code.")}var o=[];var a=t+4*4;for(var s=0;s<n;++s){var d=new Int32Array(e,a,2);a+=2*4;var l=d[0];var u=d[1];nvidia.util.timed_log(l+" verts, "+u+"triangles");var h=new THREE.BufferGeometry;if(l==0){nvidia.util.timed_log("Using unindexed geometry");var c=new Float32Array(e,a,u*3*3);a+=u*3*3*4;h.setAttribute("position",new THREE.BufferAttribute(c,3))}else{nvidia.util.timed_log("Using indexed geometry");var c=new Float32Array(e,a,l*3);a+=l*3*4;var v=new Uint32Array(e,a,u*3);a+=u*3*4;h.setAttribute("position",new THREE.BufferAttribute(c,3));h.setIndex(new THREE.BufferAttribute(v,1))}h.computeBoundingSphere();nvidia.util.timed_log("Done parsing mesh "+s);o.push(h)}return o};if(typeof module!=="undefined"){module.exports=nvidia.geometry}var nvidia=nvidia||{};nvidia.test=nvidia.test||{};nvidia.test.canvas=null;nvidia.test.getCanvas=function(e){if(!nvidia.test.canvas){nvidia.test.canvas=document.createElement("canvas")}nvidia.test.canvas.width=e;nvidia.test.canvas.height=e;return nvidia.test.canvas};nvidia.test.stripBase64Marker=function(e){let t=";base64,";let i=e.indexOf(t)+t.length;return e.substring(i)};nvidia.test.convertDataUrl=function(t,a){return new Promise((r,e)=>{let o=document.createElement("img");o.onload=function(){let e=nvidia.test.getCanvas(a);let t=e.getContext("2d");t.drawImage(o,0,0,a,a);let i=t.getImageData(0,0,a,a);let n=t.createImageData(i);n.data.set(i.data);r([n,e.toDataURL()])};o.onerror=e;o.src=t})};nvidia.test.imageDataToDataUrl=function(e){let t=nvidia.test.getCanvas(e.width);let i=t.getContext("2d");i.putImageData(e,0,0);return t.toDataURL()};nvidia.test.getImageDiff=function(r,o,a){if(a===undefined){a=.2}let e=nvidia.test.getCanvas(r.width);let t=e.getContext("2d");let s=t.createImageData(o);let d=0;for(let n=0;n<r.width;++n){for(let e=0;e<r.height;++e){let t=(e*r.height+n)*4;let i=0;for(let e=0;e<3;++e){let e=Math.abs(r.data[t]-o.data[t]);i+=Math.pow(e/255,2)}s.data[t+3]=255;i=Math.sqrt(i);if(i>a){s.data[t]=255;d+=1}}}return[s,d]};var nvidia=nvidia||{};nvidia.util=nvidia.util||{};nvidia.util.LOG_LEVELS={DEBUG:10,INFO:20,WARN:30,ERROR:40};nvidia.util.GLOBAL_LOG_LEVEL=nvidia.util.LOG_LEVELS.DEBUG;nvidia.util.set_global_log_level=function(e){nvidia.util.GLOBAL_LOG_LEVEL=nvidia.util.LOG_LEVELS[e]};nvidia.util.timed_log=function(i,e){let n=nvidia.util.LOG_LEVELS["DEBUG"];if(e&&nvidia.util.LOG_LEVELS[e]){n=nvidia.util.LOG_LEVELS[e]}if(n>=nvidia.util.GLOBAL_LOG_LEVEL){let e=new Date;let t=e.getMinutes()+":"+e.getSeconds()+":"+e.getMilliseconds()+"  "+i;if(n>=nvidia.util.LOG_LEVELS["ERROR"]){console.error(t)}else if(n>=nvidia.util.LOG_LEVELS["WARN"]){console.warn(t)}else if(n>=nvidia.util.LOG_LEVELS["INFO"]){console.info(t)}else{console.log(t)}}};nvidia.util.detect_native_byteorder=function(){let e=new Uint32Array([287454020]);let t=new Uint8Array(e.buffer);if(t[0]===68){return"little"}else if(t[0]===17){return"big"}else{return"unknown"}};nvidia.util.downloadURL=function(e,t){var i=document.createElement("a");document.body.appendChild(i);i.style="display: none";i.href=t;i.download=e;i.click();window.URL.revokeObjectURL(t);document.body.removeChild(i)};nvidia.util.updateCurrentUrlParam=function(e,t){let i=new URL(window.location.href);let n=i.searchParams;if(t==n.get(e)){return false}if(t===undefined||t===false){n.delete(e)}else{n.set(e,t)}let r=i.toString();window.history.replaceState({},document.title,r);return true};if(typeof module!=="undefined"){module.exports=nvidia.util}var nvidia=nvidia||{};nvidia.Controller=function(){this.supported_types=["mesh","pointcloud"];this.ws=null;this.dir_info=null;this.renderers={};this.active_views={};this.init()};nvidia.Controller.prototype.init=function(){this.initWebSocket();this.initRenderers();this.initSidebarEvents()};nvidia.Controller.prototype.getHeaderId=function(e,t){return e+"-header"+t};nvidia.Controller.prototype.getInfoId=function(e,t){return e+"-info"+t};nvidia.Controller.prototype.getViewContainerId=function(e,t){return e+"-view"+t};nvidia.Controller.prototype.initRenderers=function(){let t=null;for(let e=0;e<this.supported_types.length;++e){const i=this.supported_types[e];this.renderers[i]=[];const n=$("#"+i+"-all .view-container");nvidia.util.timed_log("Parsed "+n.length+" "+i+" viewport containers.");for(let e=0;e<n.length;++e){const r=this.getViewContainerId(i,e);const o=new nvidia.ThreeJsRenderer(r,t);if(this.shouldLinkCameras()&&t===null){t=o.camera}this.renderers[i].push(o)}}};nvidia.Controller.prototype.makeGeometryRequest=function(e,t,i){if(this.active_views[e].length<=t){nvidia.util.timed_log("Cannot make "+e+" geometry request for non-existent viewport "+t);return null}const n=this.active_views[e][t];let r={type:e,category:n["category"],id:n["id"],time:n["time"],view_id:t};if(i!==undefined){r.current_time=n["time"];r.time=i}return r};nvidia.Controller.prototype.initViews=function(){let t=0;for(let e=0;e<this.supported_types.length;++e){const r=this.supported_types[e];const o=this.dir_info[r];const i=this.renderers[r];this.active_views[r]=[];$("#"+r+"-all .id").empty();const a=$("#"+r+"-all .cat");a.empty();a.off("change");if(!o||o.length==0){nvidia.util.timed_log("No entries for type "+r);continue}a.append($("<option></option>").attr("value","-1").text("No Category").attr("selected",true));for(let e=0;e<o.length;++e){a.append($("<option></option>").attr("value",e).text(o[e]["category"]));t=Math.max(o[e]["end_time"],t)}let n=0;const s=i.length;for(let i=0;i<s;++i){let e=Math.min(i,o.length-1);let t=o[e];if(i>=o.length){n=Math.min(t["ids"].length-1,n+1)}this.active_views[r].push({category:t["category"],id:t["ids"][n],time:t["end_time"]});const d="#"+this.getHeaderId(r,i);const l=$(d+" .cat");l.val(e);const u=$(d+" .id");u.off("change");u.empty();$.each(t["ids"],function(e){u.append($("<option></option>").attr("value",e).text("id "+e))});u.val(t["ids"][n]);const h=function(e,t,i){return function(){e.onViewDropdownChange(t,i)}};u.on("change",h(this,r,i));l.on("change",h(this,r,i));if(t["ids"].length<2){u.hide()}}}$("#timeslider").attr("max",t).val(t);this.requestGeometryForAllViews()};nvidia.Controller.prototype.initSidebarEvents=function(){$("#timeslider").on("change",function(t){return function(e){t.onTimeSliderValueChange($("#timeslider").val())}}(this));$("#radius").on("change",function(e){nvidia.util.updateCurrentUrlParam("radius",$(this).val())});$("#linkcam").on("change",function(e){nvidia.util.updateCurrentUrlParam("linkcam",this.checked)});$("#maxviews").on("change",function(e){nvidia.util.updateCurrentUrlParam("maxviews",$(this).val())});$("#refresh").click(function(e){location.reload()})};nvidia.Controller.prototype.getSphereRadius=function(){return $("#radius").val()};nvidia.Controller.prototype.shouldLinkCameras=function(){return $("#linkcam")[0].checked};nvidia.Controller.prototype.onTimeSliderValueChange=function(e){this.requestGeometryForAllViews(e)};nvidia.Controller.prototype.onViewDropdownChange=function(e,t){const i="#"+this.getHeaderId(e,t);const n=$(i+" .cat").val();const r=$(i+" .id").val();this.active_views[e][t].id=r;this.active_views[e][t].category=this.dir_info[e][n].category;this.active_views[e][t].time=$("#timeslider").val();this.requestGeometry([this.makeGeometryRequest(e,t)])};nvidia.Controller.prototype.requestGeometryForAllViews=function(t){let i=[];for(let e=0;e<this.supported_types.length;++e){const n=this.supported_types[e];for(let e=0;e<this.active_views[n].length;++e){i.push(this.makeGeometryRequest(n,e,t))}}this.requestGeometry(i)};nvidia.Controller.prototype.initWebSocket=function(){this.ws=new WebSocket("ws://"+window.location.host+"/websocket/");this.ws.binaryType="arraybuffer";this.ws.onopen=function(e){return function(){e.onopen()}}(this);this.ws.onmessage=function(t){return function(e){t.onmessage(e)}}(this);this.ws.onclose=function(e){return function(){e.onclose()}}(this)};nvidia.Controller.prototype.requestGeometry=function(e){var t={type:"geometry",data:e};this.sendMessage(JSON.stringify(t))};nvidia.Controller.prototype.sendMessage=function(e){nvidia.util.timed_log("Sending message: "+e);this.ws.send(e)};nvidia.Controller.prototype.onopen=function(){nvidia.util.timed_log("Connection open")};nvidia.Controller.prototype.onmessage=function(e){nvidia.util.timed_log("Message received");if(typeof e.data==="string"){nvidia.util.timed_log("Got text message: "+e.data);this.processTextMessage(e.data)}else if(e.data instanceof ArrayBuffer){nvidia.util.timed_log("Got arraybuffer message");const i=this.parseBinaryGeometry(e.data);if(i){this.renderers[i.type][i.view_id].setMeshes(i.geos);this.active_views[i.type][i.view_id].time=i.time;var t="";if(i.type==="mesh"){nvidia.util.timed_log("Setting meshes for "+i.view_id);t="nverts: "+i.geos[0].getAttribute("position").count}else if(i.type==="pointcloud"){nvidia.util.timed_log("Setting meshes for "+i.view_id);t="npts: "+i.geos[0].getAttribute("instanceTranslation").count}const n=nvidia.geometry.GetBoundingBox(i.geos);bbox_str="bbox: "+n.min.x.toFixed(3)+"..."+n.max.x.toFixed(3)+", "+n.min.y.toFixed(3)+"..."+n.max.y.toFixed(3)+", "+n.min.z.toFixed(3)+"..."+n.max.z.toFixed(3);const r=$("#"+this.getInfoId(i.type,i.view_id));r.empty();r.append($("<div></div>").text(bbox_str));r.append($("<div></div>").text(t));r.append($("<div></div>").text("timecode: "+i.time))}}else{nvidia.util.timed_log("Got unknown message");console.log(e)}};nvidia.Controller.prototype.parseBinaryGeometry=function(e){nvidia.util.timed_log("Parsing binary data");const t=new Int32Array(e,0,4);const i=t[0];const n=t[1];const r=t[2];const o=t[3];let a="unknown";if(i===0){const s=nvidia.geometry.BufferedGeometriesFromBinary(e,4*4);return{type:"mesh",geos:s,view_id:n,time:r}}else if(i===1){const s=nvidia.geometry.PtCloudsFromBinary(e,4*4,this.getSphereRadius());return{type:"pointcloud",geos:s,view_id:n,time:r}}else{nvidia.util.timed_log("Received unsupported data type "+i+" for viewport "+n);return null}};nvidia.Controller.prototype.processTextMessage=function(e){const t=JSON.parse(e);if(t["type"]==="dirinfo"&&t["data"]){this.dir_info=t["data"];this.initViews()}else{nvidia.util.timed_log("Unexpected message:");console.log(t)}};nvidia.Controller.prototype.onclose=function(){nvidia.util.timed_log("Connection closed")};if(typeof module!=="undefined"){module.exports=nvidia.Controller}
